5-2-Exam

1.O_APPEND

int open(const char *path, int mode) {
    struct Fd *fd;
    struct Filefd *ffd;
    u_int size, fileid;
    int r;
    u_int va;
    u_int i;

    // Step 1: Alloc a new Fd, return error code when fail to alloc.
    // Hint: Please use fd_alloc.
    r = fd_alloc(&fd);
    if (r < 0) {
        return r;
    }

    // Step 2: Get the file descriptor of the file to open.
    r = fsipc_open(path, mode, fd);
    if (r < 0) {
        return r;
    }

    // Step 3: Set the start address storing the file's content. Set size and fileid correctly.
    // Hint: Use fd2data to get the start address.
    va = fd2data(fd);
    ffd = (struct Filefd *) fd;
    fileid = ffd->f_fileid;
    size = ffd->f_file.f_size;
/************ ↓↓ ***************************************/
    if (mode & O_APPEND) {
        ffd->f_fd.fd_offset = size;
    }

    // Step 4: Map the file content into memory.
    for (i = 0; i < size; i += BY2BLK) {
        r = fsipc_map(fileid, i, va + i);
        if (r < 0) {
            return r;
        }
    }
/************ ↓↓ ***************************************/
    if (mode & O_ALONE) {
        syscall_mem_map(0, fd, 0, fd, (*vpt)[VPN(fd)] & (PTE_V | PTE_R));
    }

    // Step 5: Return file descriptor.
    // Hint: Use fd2num.
    return fd2num(fd);
}